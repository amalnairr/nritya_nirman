import autogen
from typing import Annotated

config_list = autogen.config_list_from_json("GROQ_CONFIG_LIST.json")

llm_config = {
    "temperature": 0.2,
    "config_list": config_list,
    "max_tokens": 600,
}

user_proxy = autogen.UserProxyAgent(
    name = "Admin",
    system_message = "Human Admin. The process ends only if the Admin approves. Admin approves if critic says \"APPROVED\".",
    human_input_mode = "NEVER",
    code_execution_config={"use_docker": False},
)

with open("Tukda.txt", "r") as f:
    tukda = f.read()
with open("Tihai.txt", "r") as f:
    tihai = f.read()
with open("SamSeSam.txt", "r") as f:
    samse = f.read()
with open("Chakkardar.txt", "r") as f:
    chakkardar = f.read()
with open("GenRules.txt", "r") as f:
    rules = f.read()

tihai_composer = autogen.AssistantAgent(
    name = "tihai_composer",
    llm_config = llm_config,
    description="This is a composer agent that generates Kathak Tihai compositions.",
    system_message = """Some examples of Kathak Tihais: {tihai}
    Tihai Composer. You compose  a variety of Kathak Tihais. Each segment is separated by a pipe symbol (|).
    Take the feedback of the critic and make changes if needed.""".format(tihai=tihai),
)

tukda_composer = autogen.AssistantAgent(
    name = "tukda_composer",
    llm_config = llm_config,
    description="This is a composer agent that generates Kathak Tukda compositions.",
    system_message = """Some examples of Kathak Tukdas: {tukda}
    Tukda Composer. You compose a variety of Kathak Tukdas.
    Strictly generate tukdas with 17 or 33 segments. Each segments is separated by a pipe (|).
    Take the feedback of the critic and make changes if needed.""".format(tukda=tukda),
)

chakkardar_composer = autogen.AssistantAgent(
    name = "tihaiComp",
    llm_config = llm_config,
    description="This is a composer agent that generates Kathak Chakkardar Tukda compositions.",
    system_message = """Some examples of chakkardar compositions: {chakkardar}
    Chakkardar Composer. You compose a variety of unique Kathak Chakkardar. Each segments is separated by a pipe (|).
    Take the feedback of the critic and make changes if needed.""".format(chakkardar=chakkardar),
)

samsesam_composer = autogen.AssistantAgent(
    name = "SamSeSamComp",
    llm_config = llm_config,
    description="This is a composer agent that generates Kathak Sam Se Sam compositions.",
    system_message = """Some examples of sam se sam: {samse}
    sam se sam Composer. You compose Kathak sam se sam Tukdas. Each segments is a segment, and each segment is separated by a pipe symbol (|). Each segment contains bols. 
    Take the feedback of the critic and make changes if needed.""".format(samse=samse),
)

critic = autogen.AssistantAgent(
    name = "Critic",
    llm_config = llm_config,
    description="This is a critic agent that checks the rules of the Kathak compositions.",
    system_message = """Here are some rules: {rules}
    Do not directly trust the composer, strictly verify the compositions generated by composer.
    Ensure that the compositions follow the rules of Kathak dance. Do not generate compositions. 
    ONLY  after verification, IF the composition is correct, end message with "APPROVED" else provide feedback to the composer.
    """.format(rules=rules),
    is_termination_msg=lambda x: "APPROVED" in x['content'] if x['content'] else False,
)

group_chat = autogen.GroupChat(
    agents = [chakkardar_composer, critic, user_proxy], messages = [], max_round = 8, speaker_selection_method="round_robin",
)

manager = autogen.GroupChatManager(
    groupchat = group_chat, llm_config = llm_config

    )

user_proxy.initiate_chat(
    manager,
    message = """
    Compose a unique Chakkardar.
    """
    )