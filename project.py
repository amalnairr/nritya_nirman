import autogen
from enum import Enum
from composition_parser import Composition, get_composition_parser

config_list = autogen.config_list_from_json("GROQ_CONFIG_LIST.json")

llm_config = {
    "temperature": 0.2,
    "config_list": config_list,
    "max_tokens": 600,
}

user_proxy = autogen.UserProxyAgent(
    name="Admin",
    system_message="Human Admin. The process ends only if the Admin approves. Admin approves if critic approves.",
    human_input_mode="NEVER",
    code_execution_config={"use_docker": False},
)

with open("Tukda.txt", "r") as f:
    tukda = f.read()
with open("Tihai.txt", "r") as f:
    tihai = f.read()
with open("SamSeSam.txt", "r") as f:
    samse = f.read()
with open("Chakkardar.txt", "r") as f:
    chakkardar = f.read()
with open("GenRules.txt", "r") as f:
    rules = f.read()

tihai_composer = autogen.ConversableAgent(
    name="tihai_composer",
    llm_config=llm_config,
    description="This is a composer agent that generates Kathak Tihai compositions.",
    system_message="""Tihai Composer. You compose  a variety of unique Kathak Tihais. Each segment is separated by a pipe symbol (|).
    Take the feedback of the critic and make changes if needed.
    Some examples of Kathak Tihais: {tihai}""".format(
        tihai=tihai
    ),
)

tukda_composer = autogen.ConversableAgent(
    name="tukda_composer",
    llm_config=llm_config,
    description="This is a composer agent that generates Kathak Tukda compositions.",
    system_message="""Tukda Composer. You compose Kathak Tukdas only and nothing else.
    Only generate tukdas with 17 or 33 segments. Each segments is separated by a pipe (|).
    Some examples of Kathak Tukdas: {tukda}
    Take the feedback of the critic and make changes if needed.""".format(
        tukda=tukda
    ),
)

chakkardar_composer = autogen.ConversableAgent(
    name="ChakkardarComp",
    llm_config=llm_config,
    description="This is a composer agent that generates Kathak Chakkardar compositions.",
    system_message="""Chakkardar Composer. You compose Kathak Chakkardar Tukdas only and nothing else. Each segments is separated by a pipe (|).
    Some examples of Chakkardar compositions: {chakkardar}
    Take the feedback of the critic and make changes if needed.""".format(
        chakkardar=chakkardar
    ),
)

samsesam_composer = autogen.ConversableAgent(
    name="SamSeSamComp",
    llm_config=llm_config,
    description="This is a composer agent that generates Kathak Sam Se Sam compositions.",
    system_message="""Chakkardar Composer. You compose Kathak Chakkardar Tukdas only and nothing else. Each segments is a segment, and each segment is separated by a pipe symbol (|). Each segment contains bols. 
    Some examples of Kathak compositions: {samse}
    Take the feedback of the critic and make changes if needed.""".format(
        samse=samse
    ),
)

critic = autogen.ConversableAgent(
    name="Rule Checker",
    llm_config=llm_config,
    description="This is a critic agent that checks the rules of the Kathak compositions.",
    system_message="""Here are some rules: {rules}
    Check the Kathak compositions generated by the composer. Do not directly trust the composer, verify the compositions.
    Ensure that the compositions follow the rules of Kathak dance.Do not generate compositions. ONLY IF the composition is correct, end message with "APPROVED" else provide feedback to the composer.
    """.format(
        rules=rules
    ),
    is_termination_msg=lambda x: "APPROVED" in x["content"] if x["content"] else False,
)

segments_counter = autogen.ConversableAgent(
    name="Segments Counter",
    llm_config=llm_config,
    description="This is a critic agent that checks the number of segmentss in the Kathak compositions.",
    system_message="""Check the Kathak compositions generated by the composer and count the number of segmentss in the composition.
    Do not generate compositions. Provide feedback to the critic directly.""",
)


class CompositionType(str, Enum):
    TIHAI = "tihai"
    TUKDA = "tukda"
    CHAKKARDAR = "chakkardar"
    SAM_SE_SAM = "sam-se-sam"


def get_composer(composition_type: CompositionType):
    composition_type = CompositionType(composition_type)
    return {
        CompositionType.TIHAI: tihai_composer,
        CompositionType.TUKDA: tukda_composer,
        CompositionType.CHAKKARDAR: chakkardar_composer,
        CompositionType.SAM_SE_SAM: samsesam_composer,
    }[composition_type]


def composition_from_chat_history(chat_result: autogen.ChatResult):
    found_approval = False
    parser = get_composition_parser()
    for message in chat_result.chat_history[::-1]:
        if "APPROVED" in message["content"]:
            found_approval = True
            continue
        if not found_approval:
            continue
        composition = parser.invoke(message["content"])
        if (
            composition
            and isinstance(composition, Composition)
            and composition.is_valid()
        ):
            return composition


def generate_composition(composition_type: CompositionType):
    composition_type = CompositionType(composition_type)
    composer = get_composer(composition_type=composition_type)
    group_chat = autogen.GroupChat(
        agents=[composer, critic, user_proxy],
        messages=[],
        max_round=8,
        speaker_selection_method="round_robin",
    )
    manager = autogen.GroupChatManager(groupchat=group_chat, llm_config=llm_config)
    initial_message = {
        CompositionType.TIHAI: "Compose a Kathak Tihai",
        CompositionType.TUKDA: "Compose a Kathak Tukda",
        CompositionType.CHAKKARDAR: "Compose a Kathak Chakkardar Tukda",
        CompositionType.SAM_SE_SAM: "Compose a Kathak Sam-se-sam Tukda",
    }[composition_type]
    chat_result = user_proxy.initiate_chat(
        manager,
        message=initial_message,
    )
    return composition_from_chat_history(chat_result=chat_result)


if __name__ == "__main__":
    generate_composition(CompositionType.TIHAI)
